.wrapper {
    max-width: $max-width;
    transition: $transition;
    flex: 1 1 auto;
    min-height: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

// * MEDIA, BREAKPOINT, CONTAINER
// Макс. ширина контейнера с учетом padding, чтобы контент не прилипал к краям при адаптиве
// 1312 + 32 * 1.5 или 696 + 16

@mixin media($width) {
    @media (max-width: $width) {
        @content;
    }
}

@mixin breakpoint($name) {
    $width: map-get($grid-breakpoints, $name);
    @include media($width) {
        @content;
    }
}

@mixin container {
    margin: 0 auto;
    max-width: map-get($container-max-widths, xxl) + ($grid-gap * 1.5);
    padding: 0 calc($grid-gap * 0.75);

    @include breakpoint(xl) {
        max-width: map-get($container-max-widths, xl) + ($grid-gap * 1.5);
    }
    @include breakpoint(lg) {
        max-width: map-get($container-max-widths, lg) + $grid-gap;
        padding: 0 $grid-gap-side;
    }
    @include breakpoint(md) {
        max-width: map-get($container-max-widths, md) + ($grid-gap * 0.75);
        padding: 0 calc($grid-gap-side * 0.75);
    }
    @include breakpoint(sm) {
        max-width: map-get($container-max-widths, sm) + $grid-gap-side;
    }
    @include breakpoint(xs) {
        max-width: map-get($container-max-widths, xs) + $grid-gap-side;
    }
}

// * ADAPTIVE ROW, COL

@mixin row {
    display: flex;
    flex-wrap: wrap;
    margin-left: calc(-0.75 * $grid-gap);
    margin-right: calc(-0.75 * $grid-gap);
    & > * {
        margin: 0 $grid-gap-side;
    }
    @include breakpoint(xl) {
        margin-left: calc(-1 * $grid-gap-side);
        margin-right: calc(-1 * $grid-gap-side);
        & > * {
            margin: 0 calc($grid-gap-side * 0.75);
        }
    }
    @include breakpoint(lg) {
        margin-left: calc(-0.75 * $grid-gap-side);
        margin-right: calc(-0.75 * $grid-gap-side);
        & > * {
            margin: 0 calc($grid-gap-side * 0.75);
        }
    }

}

// * COL MIXIN

@mixin col($size) {
    flex: 0 0 auto;
    width: calc(#{percentage(calc($size / $columns-count))} - #{$grid-gap});

    @include breakpoint(lg) {
        width: calc(#{percentage(calc($size / $columns-count))} - #{calc($grid-gap-side * 1.5)});
    }
    @include breakpoint(md) {
        width: calc(#{percentage(calc($size / $columns-count) )} - #{calc($grid-gap-side * 1.5)});
    }
    @include breakpoint(sm) {
        width: calc(#{percentage(calc($size / $columns-count-xs) )} - #{$grid-gap-side});
    }
    @include breakpoint(xs) {
        width: calc(#{percentage(calc($size / $columns-count-xs) )} - #{$grid-gap-side});
    }
}

// * CLASSES

.container {
    @include container;
}

.row {
    @include row;
}

.col {
    flex: 1 0 0%;
}

// * USAGE

// selector {
//     @include col(4);
//     @include breakpoint(lg) {
//         background-color: $accent;
//     }
//     @include media(map-get($grid-breakpoints, md)) {
//         width: 600px;
//     }
// }

// *____________________________________

// * COL VARIABLE

// @mixin width-in-cols($col-type, $count) {
//     flex: 0 0 auto;
//     width: calc($col-type * $count);
// }

// @include width-in-cols(map-get($col, xxl), 4.3);

// @mixin height-in-cols($col-type, $count) {
//     flex: 0 0 auto;
//     height: calc($col-type * $count);
// }

// @include height-in-cols(map-get($col, xxl), 6);

// *____________________________________

// // BOOTSTRAP GRID

// $grid-breakpoints: (
//     xs: 0,
//     sm: 576px,
//     md: 768px,
//     lg: 992px,
//     xl: 1200px,
//     xxl: 2560px,
// );

// $container-max-widths: (
//     sm: 540px,
//     md: 720px,
//     lg: 960px,
//     xl: 1140px,
//     xxl: 1320px,
// );

// // * Columns classes generation

// @each $breakpoint, $width in $grid-breakpoints {
//     @include media($width) {
//         @for $i from 1 through $columns-count {
//             .col-#{$breakpoint}-#{$i} {
//                 @include col($i);
//             }
//         }
//     }
// }

// // * GAP REALISATION

// $grid-gap: 30px !default;
// $grid-gap-side: calc($grid-gap / 2);

// .row {
//     display: flex;
//     flex-wrap: wrap;
//     gap: $grid-gap-side;
//     margin-right: -$grid-gap-side;
//     margin-bottom: 30px;
// }

// @mixin container {
//     margin: 0 auto;
//     max-width: map-get($container-max-widths, xxl) + ($grid-gap * 1.5);
//     padding: 0 calc($grid-gap * 0.75);

//     @include breakpoint(xl) {
//         max-width: map-get($container-max-widths, xl) + ($grid-gap * 1.5);
//     }
//     @include breakpoint(lg) {
//         max-width: map-get($container-max-widths, lg) + $grid-gap;
//         padding: 0 $grid-gap-side;
//     }
//     @include breakpoint(md) {
//         max-width: map-get($container-max-widths, md) + ($grid-gap * 0.75);
//         padding: 0 calc($grid-gap-side * 0.75);
//     }
//     @include breakpoint(sm) {
//         max-width: map-get($container-max-widths, sm) + ($grid-gap * 0.75);
//     }
//     @include breakpoint(xs) {
//         max-width: map-get($container-max-widths, xs) + ($grid-gap * 0.75);
//     }
// }
